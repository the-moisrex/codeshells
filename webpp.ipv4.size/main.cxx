import standard;

#include <array>
#include <bit>
#include <cstring>
#include <print>
#include <string>

using namespace std;

size_t test(uint32_t data) {
    size_t len = 3;
    // octet 1:
    len += (data & 0xFFU) < 10 ? 1 : 0;
    len += (data & 0xFFU) < 100 ? 1 : 0;
    len += (data & 0xFFU) >= 100 ? 1 : 0;

    // octet 2:
    len += (data & 0xFF00U) < (10U << 8U) ? 1 : 0;
    len += (data & 0xFF00U) < (100U << 8U) ? 1 : 0;
    len += (data & 0xFF00U) >= (100U << 8U) ? 1 : 0;

    // octet 3:
    len += (data & 0xFF'0000U) < (10U << 16U) ? 1 : 0;
    len += (data & 0xFF'0000U) < (100U << 16U) ? 1 : 0;
    len += (data & 0xFF'0000U) >= (100U << 16U) ? 1 : 0;

    // octet 4:
    len += (data & 0xFF00'0000U) < (10U << 24U) ? 1 : 0;
    len += (data & 0xFF00'0000U) < (100U << 24U) ? 1 : 0;
    len += (data & 0xFF00'0000U) >= (100U << 24U) ? 1 : 0;
    return len;
}

size_t test2(uint32_t data) {
    size_t len = 3;

    len +=
        1 + (((data & 0xFF) >= 10) ? 1 : 0) + (((data & 0xFF) >= 100) ? 1 : 0);
    len += 1 + (((data >> 8 & 0xFF) >= 10) ? 1 : 0) +
           (((data >> 8 & 0xFF) >= 100) ? 1 : 0);
    len += 1 + (((data >> 16 & 0xFF) >= 10) ? 1 : 0) +
           (((data >> 16 & 0xFF) >= 100) ? 1 : 0);
    len += 1 + (((data >> 24 & 0xFF) >= 10) ? 1 : 0) +
           (((data >> 24 & 0xFF) >= 100) ? 1 : 0);
    return len;
}

size_t test3(uint32_t data) {
    const auto o = static_cast<const uint8_t*>(static_cast<const void*>(&data));
    return 7 + (o[0] >= 10) + (o[0] >= 100) + // Octet 1 (LSB)
           (o[1] >= 10) + (o[1] >= 100) +     // Octet 2
           (o[2] >= 10) + (o[2] >= 100) +     // Octet 3
           (o[3] >= 10) + (o[3] >= 100);      // Octet 4 (MSB)
}

size_t test4(uint32_t data) {
    auto const oct =
        std::bit_cast<std::array<std::uint8_t, 4>>(std::byteswap(data));
    return 7 +                                // 3 (dots) + 4 (base digits)
           (oct[0] >= 10) + (oct[0] >= 100) + // Octet 1 (LSB)
           (oct[1] >= 10) + (oct[1] >= 100) + // Octet 2
           (oct[2] >= 10) + (oct[2] >= 100) + // Octet 3
           (oct[3] >= 10) + (oct[3] >= 100);  // Octet 4 (MSB)
}

int main() {
    // the important part is the assembly generated by clang and gcc
    // I don't care about them working actually.
    std::println("{} {} {} {}", test(1), test2(1), test3(1), test4(1));
    return 0;
}
